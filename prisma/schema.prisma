generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "../src/server/api/schemas/prisma/" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())

  class   Class?  @relation(fields: [classId], references: [id])
  classId String? @unique

  login        String @unique
  password     String
  tokenVersion Int    @default(0)

  email      String?
  name       String
  surname    String
  patronymic String?
  avatar     String?

  role Role

  courses Course[]

  sendedNotifications   Notification[] @relation("sendedNotifications")
  receivedNotifications Notification[] @relation("receivedNotifications")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Class {
  id       String     @id
  users    User[]
  sheduler Sheduler[]
}

model Course {
  id String @id @default(uuid())

  title       String
  description String

  password String?

  users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sheduler {
  id String @id @default(uuid())

  class   Class  @relation(fields: [classId], references: [id])
  classId String

  subject  String
  teacher  String
  address  String
  audience Int

  start DateTime
  end   DateTime
}

model Notification {
  id String @id @default(uuid())

  sender      User   @relation("sendedNotifications", fields: [senderId], references: [id])
  senderId    String
  recipient   User   @relation("receivedNotifications", fields: [recipientId], references: [id])
  recipientId String

  isReaded Boolean @default(false)

  subject String
  link    String

  createdAt DateTime @default(now())
}

enum Role {
  Admin
  Student
  Teacher
}
